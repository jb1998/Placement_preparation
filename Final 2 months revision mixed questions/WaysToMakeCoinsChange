public class Solution {

	public static int helper(int denominations[], int value,int start,int dp[][]){
  if(value<0)
      return 0;
        if(value==0)
      return 1;
        if(start==denominations.length){
      if(value==0)
          return 1;
      return 0;
  }
        int one=0,two=0;
       if((value-denominations[start])>=0 && dp[start][value-denominations[start]]!=-1){
        one =dp[start][value-denominations[start]];   
       }else if((value-denominations[start])>=0  ){
        
        one=helper(denominations,value-denominations[start],start,dp);
        dp[start][value-denominations[start]]=one;   
       }
        if((start+1)<denominations.length && dp[start+1][value]!=-1){
         two=dp[start+1][value];
        }else if((start+1)<denominations.length ){
            two=helper(denominations,value,start+1,dp);
            dp[start+1][value]=two;
        }
        return one+two;
	}      
    
	public static int countWaysToMakeChange(int denominations[], int value){
    int dp[][]=new int [denominations.length+1][value+1];
        for(int i=0;i<=denominations.length;i++){
            for(int j=0;j<=value;j++){
                dp[i][j]=-1;
            }
        }
	return helper(denominations,value,0,dp);
    }
    
}
