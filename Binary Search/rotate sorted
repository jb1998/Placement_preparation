public class Solution {
    
    int findPivot(final List<Integer> a, int low, int high) 
    { 
      
       if (high < low)   
            return -1; 
       if (high == low)  
            return low; 
         
       int mid = (low + high)/2;    
       if (mid < high && a.get(mid) > a.get(mid+1)) 
           return mid; 
       if (mid > low && a.get(mid) < a.get(mid-1)) 
           return (mid-1); 
       if (a.get(low) >= a.get(mid)) 
           return findPivot(a, low, mid-1); 
       return findPivot(a, mid + 1, high); 
    } 
    
    
    public int pivot(final List<Integer> a,int start,int end){
        // int start=0;
        // int end=a.size()-1;
            int mid=start+(end-start)/2;
            if(mid+1<=end && a.get(mid)>a.get(mid+1)){
                return mid;
            }else if(mid-1>=start && a.get(mid)<a.get(mid-1)){
                return mid-1;
            } 
             if (a.get(start) >= a.get(mid)) 
           return pivot(a,start,mid-1);
            return pivot(a,mid+1,end);
        
    }
    public int sea(final List<Integer> a, int b,int a1,int a2){
            // System.out.println(a1+" "+a2);
        int start=a1;
        int end=a2;
        while(start<=end){
            int mid=start+(end-start)/2;
            //  System.out.println(a.get(mid) +" "+b);
            if(a.get(mid)==b)
            return mid;
             if(a.get(mid)<b){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return -1;
    }
    public int search(final List<Integer> a, int b) {
        int piv=findPivot(a,0,a.size()-1);
       
        int a1=sea(a,b,0,piv);
        int a2=sea(a,b,piv+1,a.size()-1);
    
        if(a1==-1 && a2==-1){
            return -1;
        }else{
            return Math.max(a1,a2);
        }
    }
}
